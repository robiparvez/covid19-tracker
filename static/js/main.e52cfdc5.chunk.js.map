{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/covid-19.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","API_URL","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","length","map","reportDate","total","date","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchApi","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","index","App","state","fetchedData","setState","this","src","coronaImage","alt","image","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.e52cfdc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Rs4SW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl___lWu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3ksTJ\",\"card\":\"Cards_card__11Cgk\",\"infected\":\"Cards_infected__3al2S\",\"recovered\":\"Cards_recovered__3UPxu\",\"deaths\":\"Cards_deaths__3vhf4\"};","import { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n\r\n    return confirmed && (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                {/* CONFIRMED */}\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of covid-19 infections</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                {/* RECOVERED */}\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of covid-19 recoveries</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                {/* DEATHS */}\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of covid-19 deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\nconst API_URL = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = API_URL;\r\n    if (country) {\r\n        changeableUrl = `${API_URL}/countries/${country}`;\r\n    }\r\n    try {\r\n        const {\r\n            data: { confirmed, deaths, recovered, lastUpdate }\r\n        } = await axios.get(changeableUrl);\r\n\r\n        return { confirmed, deaths, recovered, lastUpdate };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${API_URL}/daily`);\r\n        return (\r\n            data.length &&\r\n            data.map(({ confirmed, deaths, reportDate }) => ({\r\n                confirmed: confirmed.total,\r\n                deaths: deaths.total,\r\n                date: reportDate\r\n            }))\r\n        );\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {\r\n            data: { countries }\r\n        } = await axios.get(`${API_URL}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        };\r\n        fetchApi();\r\n    }, []);\r\n\r\n    if (!dailyData.length && !confirmed) {\r\n        return null;\r\n    }\r\n\r\n    // Line chart\r\n    const lineChart = dailyData.length && (\r\n        <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [\r\n                    {\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true\r\n                    },\r\n                    {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true\r\n                    }\r\n                ]\r\n            }}\r\n        />\r\n    );\r\n\r\n    // Bar chart\r\n    const barChart = confirmed && (\r\n        <Bar\r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [\r\n                    {\r\n                        label: 'People',\r\n                        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }\r\n                ]\r\n            }}\r\n            options={{\r\n                legend: {\r\n                    display: false,\r\n                    title: {\r\n                        display: true,\r\n                        text: `Current state in ${country}`\r\n                    }\r\n                }\r\n            }}\r\n        />\r\n    );\r\n\r\n    // console.log(country);\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n            {/* <div className={styles.container}>{country && country !== 'global' ? barChart : lineChart}</div> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n","import { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setCountries(await fetchCountries());\r\n        };\r\n        fetchApi();\r\n    }, [setCountries]);\r\n\r\n    if (!countries.length) {\r\n        return null;\r\n    }\r\n\r\n    return countries.length && (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=''>Global</option>\r\n                {countries.map((country, index) => (\r\n                    <option key={index} value={country}>\r\n                        {country}\r\n                    </option>\r\n                ))}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default CountryPicker;\r\n","export default __webpack_public_path__ + \"static/media/covid-19.9e5d4fc7.png\";","import React, { Component } from 'react';\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport coronaImage from './images/covid-19.png';\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data: fetchedData });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({ data: fetchedData, country: country });\r\n    };\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n        return (\r\n            <div className={styles.container}>\r\n                <img src={coronaImage} alt='covid-19' className={styles.image} />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__27v_a\",\"image\":\"App_image__3j5kK\"};"],"sourceRoot":""}